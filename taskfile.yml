version: "3"

vars:
  VERSION: "0.1.0"
  STACK_VERSION: "8.13.4"

  ORG: vigilantsec
  NAME: elasticstack
  BINARY: terraform-provider-{{ .NAME }}
  MARCH: "{{ OS }}_{{ ARCH }}"
  REGISTRY_PATH: ~/.terraform.d/plugins/registry.terraform.io/{{ .ORG }}/{{ .NAME }}/{{ .VERSION }}/{{ .MARCH }}

  GOVERSION:
    sh: grep -e '^go' go.mod | cut -f 2 -d ' '

tasks:
  default:
    desc: Default, show available tasks
    cmds:
      - cmd: task --list

  #####################################################################################

  build:
    desc: Build the binary
    cmds:
      - go build -o {{ .BINARY }}

  install:
    desc: Install the binary into the local Terraform cache
    vars:
      REGISTRY: ~/.terraform.d/plugins/registry.terraform.io
      PATH: "{{ .ORG }}/{{ .NAME }}/{{ .VERSION }}/{{ .MARCH }}"
    cmds:
      - mkdir -p {{ .REGISTRY_PATH }}
      - mv {{ .BINARY }} {{ .REGISTRY_PATH }}

  clean:
    desc: Delete build artifacts
    cmds:
      - rm -f {{ .BINARY }}

  testacc:
    desc: Run acceptance tests
    env:
      TF_ACC: 1
      TF_LOG: "{{ .TF_LOG }}"
      ELASTICSEARCH_ENDPOINT: https://localhost:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: password
      ELASTICSEARCH_INSECURE: "true"
      KIBANA_ENDPOINT: https://localhost:5601
      KIBANA_USERNAME: elastic
      KIBANA_PASSWORD: password
      KIBANA_INSECURE: "true"
      FLEET_ENDPOINT: https://localhost:5601
      FLEET_USERNAME: elastic
      FLEET_PASSWORD: password
      FLEET_INSECURE: "true"
    cmds:
      - go test -v ./... -count 1 -parallel 10 -timeout 120m {{ .CLI_ARGS }}

  docker-testacc:
    desc: Run acceptance tests in a Docker container
    deps:
      - docker-elasticstack
    env:
      GOVERSION: "{{ .GOVERSION }}"
      STACK_VERSION: "{{ .STACK_VERSION }}"
      TEST_ARGS: "{{ .CLI_ARGS }}"
      TF_LOG: "{{ .TF_LOG }}"
    cmds:
      - docker-compose -f docker/docker-compose.yml up testacc

  docker-up:
    desc: Start the Docker Elasticstack
    env:
      GOVERSION: "{{ .GOVERSION }}"
      STACK_VERSION: "{{ .STACK_VERSION }}"
      TEST_ARGS: ""
      TF_LOG: "{{ .TF_LOG }}"
    cmds:
      - task: docker-ssl-setup
      - docker-compose -f docker/docker-compose.yml up -d elasticsearch kibana
      - task: docker-kibana-password
      - task: docker-kibana-api-key
      - docker-compose -f docker/docker-compose.yml up -d kibana_is_ready

  docker-ssl-setup:
    desc: Generates any required SSL certificates
    internal: true
    sources:
      - docker/mkcerts.sh
    generates:
      - docker/certs/*
    env:
      GOVERSION: "{{ .GOVERSION }}"
      STACK_VERSION: "{{ .STACK_VERSION }}"
      TEST_ARGS: ""
      TF_LOG: "{{ .TF_LOG }}"
    cmds:
      - docker-compose -f docker/docker-compose.yml up ssl_setup

  docker-kibana-password:
    desc: Sets the Kibana user password
    internal: true
    cmds:
      - >-
        curl -sX POST -u elastic:password
        -H "Content-Type: application/json"
        --cacert docker/certs/ca/ca.crt
        https://localhost:9200/_security/user/kibana_system/_password
        -d '{"password":"password"}'

  docker-kibana-api-key:
    desc: Creates a Kibana API key
    internal: true
    cmds:
      - >-
        curl -sX POST -u elastic:password
        -H "Content-Type: application/json"
        --cacert docker/certs/ca/ca.crt
        https://localhost:9200/_security/api_key
        -d '{"name":"test-api-key"}'
        | jq -r '"API_KEY=\"" + .encoded + "\""'
        > docker/test.env

  docker-down:
    desc: Shutdown Docker
    env:
      GOVERSION: "{{ .GOVERSION }}"
      STACK_VERSION: "{{ .STACK_VERSION }}"
      TEST_ARGS: ""
      TF_LOG: "{{ .TF_LOG }}"
    cmds:
      - docker-compose -f docker/docker-compose.yml down -t0
